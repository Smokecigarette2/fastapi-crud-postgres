from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy.orm import Session
from database import SessionLocal, engine
from models import User, Note, Base
import schemas
app = FastAPI()

# Create database tables
Base.metadata.create_all(bind=engine)
@app.get("/")
def hello():
    return {"message": "Hello!"}
# Dependency to get a database session
def get_db():
    db = SessionLocal()
    try:
        yield db  # Provide the session
    finally:
        db.close()  # Close the session after request


# 1Ô∏è‚É£ Create a User (POST)
@app.post("/users/", response_model=schemas.UserResponse)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    # Check if email already exists
    existing_user = db.query(User).filter(User.email == user.email).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="Email already exists")

    new_user = User(email=user.email, name=user.name)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)  # Reload user from the database
    return new_user


# 2Ô∏è‚É£ Get All Users (GET)
@app.get("/users/", response_model=list[schemas.UserResponse])
def get_users(db: Session = Depends(get_db)):
    return db.query(User).all()


# 3Ô∏è‚É£ Get a Single User (GET)
@app.get("/users/{user_id}/", response_model=schemas.UserResponse)
def get_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user


# 4Ô∏è‚É£ Update a User (PUT)
@app.put("/users/{user_id}/", response_model=schemas.UserResponse)
def update_user(user_id: int, updated_user: schemas.UserCreate, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    user.email = updated_user.email
    user.name = updated_user.name
    db.commit()
    db.refresh(user)
    return user


# 5Ô∏è‚É£ Delete a User (DELETE)
@app.delete("/users/{user_id}/")
def delete_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    db.delete(user)
    db.commit()
    return {"message": "User deleted successfully"}

# üìù 1Ô∏è‚É£ Create a Note
@app.post("/notes/", response_model=schemas.NoteResponse)
def create_note(note: schemas.NoteCreate, user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    new_note = Note(title=note.title, content=note.content, user_id=user_id)
    db.add(new_note)
    db.commit()
    db.refresh(new_note)
    return new_note

# üìù 2Ô∏è‚É£ Get All Notes
@app.get("/notes/", response_model=list[schemas.NoteResponse])
def get_notes(db: Session = Depends(get_db)):
    return db.query(Note).all()

# üìù 3Ô∏è‚É£ Get a Single Note
@app.get("/notes/{note_id}/", response_model=schemas.NoteResponse)
def get_note(note_id: int, db: Session = Depends(get_db)):
    note = db.query(Note).filter(Note.id == note_id).first()
    if not note:
        raise HTTPException(status_code=404, detail="Note not found")
    return note

# üìù 4Ô∏è‚É£ Update a Note
@app.put("/notes/{note_id}/", response_model=schemas.NoteResponse)
def update_note(note_id: int, updated_note: schemas.NoteCreate, db: Session = Depends(get_db)):
    note = db.query(Note).filter(Note.id == note_id).first()
    if not note:
        raise HTTPException(status_code=404, detail="Note not found")

    note.title = updated_note.title
    note.content = updated_note.content
    db.commit()
    db.refresh(note)
    return note

# üìù 5Ô∏è‚É£ Delete a Note
@app.delete("/notes/{note_id}/")
def delete_note(note_id: int, db: Session = Depends(get_db)):
    note = db.query(Note).filter(Note.id == note_id).first()
    if not note:
        raise HTTPException(status_code=404, detail="Note not found")

    db.delete(note)
    db.commit()
    return {"message": "Note deleted successfully"}

# üìù 6Ô∏è‚É£ Get All Notes for a User
@app.get("/users/{user_id}/notes/", response_model=list[schemas.NoteResponse])
def get_notes_by_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    return db.query(Note).filter(Note.user_id == user_id).all()